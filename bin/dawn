#!/usr/bin/env ruby

require 'getoptlong'
require 'json'

require 'codesake_commons'
require 'codesake-dawn'

def dry_run(target, engine)
  engine.set_target(target) 
  engine.load_knowledge_base
  engine.apply_all
end

def output_json_run(target = "", engine = nil)
  result = {}
  return {:status=>"KO", :message=>"BUG at #{__FILE__}@#{__LINE__}: target is empty or engine is nil."}.to_json if target.empty? or engine.nil?
  return {:status=>"KO", :message=>"#{target} doesn't exist"}.to_json if ! Dir.exist?(target)
  check_applied = dry_run(target, engine)
  return {:status=>"KO", :message=>"no security checks applied"}.to_json unless check_applied

  result[:status]="OK"
  result[:target]=target
  result[:mvc]=engine.name
  result[:mvc_version]=engine.get_mvc_version
  result[:vulnerabilities_count]=engine.vulnerabilities.count
  result[:vulnerabilities]=engine.vulnerabilities
  result[:mitigated_vuln_count]=engine.mitigated_issues.count
  result[:mitigated_vuln] = engine.mitigated_issues

  result.to_json
end 

def dump_knowledge_base(verbose = false)
  kb = Codesake::Dawn::KnowledgeBase.new
  lines = []
  lines << "Security checks currently supported:\n\n"

  kb.all.each do |check|
    if verbose
      lines << "Name: #{check.name}\tCVSS: #{check.cvss_score}\tReleased: #{check.release_date}"
      lines << "Description\n#{check.message}"
      lines << "Remediation\n#{check.remediation}\n\n"
    else
      lines << "#{check.name}"
    end
  end
  
  lines.empty? ? 0 : lines.compact.join("\n")

end


APPNAME = File.basename($0)
LIST_KNOWN_FRAMEWORK  = %w(rails sinatra) #padrino)
VALID_OUTPUT_FORMAT   = %w(console json csv html)

logger  = Codesake::Commons::Logging.instance
opts    = GetoptLong.new(
  [ '--rails',                  '-r',   GetoptLong::NO_ARGUMENT],
  [ '--sinatra',                '-s',   GetoptLong::NO_ARGUMENT],
  [ '--padrino',                '-p',   GetoptLong::NO_ARGUMENT],
  [ '--list-known-framework',   '-f',   GetoptLong::NO_ARGUMENT ],
  [ '--list-knowledgebase',     '-k',   GetoptLong::NO_ARGUMENT ],
  [ '--output',                 '-o',   GetoptLong::REQUIRED_ARGUMENT],
  [ '--verbose',                '-V',   GetoptLong::NO_ARGUMENT],
  [ '--count-only',             '-C',   GetoptLong::NO_ARGUMENT],
  [ '--version',                '-v',   GetoptLong::NO_ARGUMENT],
  [ '--help',                   '-h',   GetoptLong::NO_ARGUMENT]
)
engine  = nil
options = {:verbose=>false, :output=>"console", :count_only=>false, :dump_kb=>false, :mvc=>nil}

trap("INT")   { logger.die('[INTERRUPTED]') }


opts.each do |opt, val|
  case opt
  when '--version'
    puts "#{Codesake::Dawn::VERSION}"
    Kernel.exit(0)
  when '--rails'
    options[:mvc]=:force_rails
  when '--sinatra'
    options[:mvc]=:force_sinatra
  when '--padrino'
    options[:mvc]=:force_padrino
    puts "sorry padrino is not yet supported"
    Kernel.exit(1)
  when '--verbose'
    options[:verbose]=true
  when '--output'
    options[:output] = val unless VALID_OUTPUT_FORMAT.find_index(val).nil?
  when '--count-only'
    options[:count_only] = true

  when '--list-knowledgebase'
    options[:dump_kb]=true
   
  when '--list-known-framework'
    puts "Ruby MVC framework supported by #{APPNAME}:"
    LIST_KNOWN_FRAMEWORK.each do |mvc|
      puts "* #{mvc}"
    end
    Kernel.exit(0)
  end
end

target=ARGV.shift

## MVC auto detect
engine = Codesake::Dawn::Core.detect_mvc(target)  if options[:mvc].nil?
engine = Codesake::Dawn::Rails.new                if options[:mvc] == :force_rails
engine = Codesake::Dawn::Sinatra.new              if options[:mvc] == :force_sinatra
# engine = Codesake::Dawn::Padrino.new if options[:mvc] == :force_padrino

logger.die("ruby framework auto detect failed. Please force if rails, sinatra or padrino with -r, -s or -p flags") if engine.nil?

if options[:count_only] 
  ret = dry_run(target, engine)

  puts (ret)? engine.vulnerabilities.count : "-1" unless options[:output] == "json"
  puts (ret)? {:status=>"OK", :vulnerabilities_count=>engine.vulnerabilities.count}.to_json : {:status=>"KO", :vulnerabilities_count=>-1}.to_json
  Kernel.exit(0)
end

if options[:output] == "json"
  puts output_json_run(target, engine) 
  Kernel.exit(0)
end

if options[:dump_kb]
  puts dump_knowledge_base(options[:verbose])
  Kernel.exit(0)
end

logger.helo "#{APPNAME} v#{Codesake::Dawn::VERSION} (C) 2013 - paolo@armoredcode.com is starting up"
logger.die "missing target framework option" if engine.nil?
logger.die "missing target" if target.nil?
logger.die "#{target} doesn't exist" unless Dir.exist?(target)

engine.set_target(target) unless engine.nil?
engine.load_knowledge_base

logger.die "nothing to do on #{target}" unless engine.can_apply?
logger.log "scanning #{target}"
logger.log "#{engine.name} v#{engine.get_mvc_version} detected"
logger.log "applying all security checks" 
if engine.apply_all 
  logger.log "all security checks applied"
else
  logger.err "no security checks in the knowledge base"
end

if engine.vulnerabilities.count != 0

logger.log "#{engine.vulnerabilities.count} vulnerabilities found"
engine.vulnerabilities.each do |vuln|
  logger.err "#{vuln[:name]} failed"
  logger.log "Description: #{vuln[:message]}" if options[:verbose]
  logger.log "Solution: #{vuln[:remediation]}"
  logger.err "Evidence:"
  vuln[:evidences].each do |evidence|
    logger.err evidence
  end
end
else
  logger.ok "no vulnerabilities found."
end

if engine.mitigated_issues.count != 0
  logger.log "#{engine.mitigated_issues.count} mitigated vulnerabilities found"
  engine.mitigated_issues.each do |vuln|
    logger.ok "#{vuln[:name]} mitigated"
    vuln[:evidences].each do |evidence|
      logger.err evidence
    end
  end
end



logger.helo "#{APPNAME} is shutting down"
Kernel.exit(0)


